version: '3.8'

services:
  # 프론트엔드 서비스
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.test
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 백엔드 API 모의 서버 (실제 백엔드가 없을 경우)
  backend:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./mock-backend:/app
    ports:
      - "8000:8000"
    command: |
      sh -c "
        echo '{}' > package.json &&
        npm install express cors &&
        node -e \"
          const express = require('express');
          const cors = require('cors');
          const app = express();
          
          app.use(cors());
          app.use(express.json());
          
          // Health check endpoint
          app.get('/health', (req, res) => {
            res.json({ status: 'OK' });
          });
          
          // Mock upload endpoint
          app.post('/api/upload', (req, res) => {
            res.json({ 
              job_id: 'mock-job-123',
              status: 'processing'
            });
          });
          
          // Mock documents endpoint
          app.get('/api/upload/documents', (req, res) => {
            res.json({
              documents: [
                {
                  id: 'doc-1',
                  filename: 'test-document.pdf',
                  file_size: 1024000,
                  upload_date: new Date().toISOString(),
                  status: 'completed',
                  chunk_count: 10
                }
              ],
              total: 1
            });
          });
          
          // Mock chat endpoint
          app.post('/api/chat', (req, res) => {
            res.json({
              message: '테스트 응답입니다.',
              sources: [],
              session_id: 'test-session'
            });
          });
          
          // Mock stats endpoint
          app.get('/stats', (req, res) => {
            res.json({
              documents: {
                total: 10,
                processed: 8,
                failed: 2
              }
            });
          });
          
          app.listen(8000, () => {
            console.log('Mock backend running on port 8000');
          });
        \"
      "
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  rag-network:
    driver: bridge